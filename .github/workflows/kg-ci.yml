name: kg-ci

on:
  push:
    paths:
      - 'kg/**'
      - 'packaging/**'
      - 'installer/**'
      - 'scripts/**'
      - '.github/workflows/kg-ci.yml'
  pull_request:
    paths:
      - 'kg/**'
      - 'packaging/**'
      - 'installer/**'
      - 'scripts/**'
      - '.github/workflows/kg-ci.yml'

jobs:
  hermetic-setup:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install pip-tools
        run: pip install pip-tools
      - name: Verify Java tools
        shell: pwsh
        run: scripts/verify-java-tools.ps1
      - name: Build wheelhouse
        shell: pwsh
        run: |
          pip-compile --generate-hashes requirements.in -o requirements-lock.txt
          pip-compile --generate-hashes requirements-win.in -o requirements-win-lock.txt
          scripts/build-wheelhouse.ps1
      - name: Generate SBOM
        shell: pwsh
        run: scripts/sbom-cyclonedx.ps1
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: hermetic-artifacts
          path: |
            dist/sbom.cdx.json
            tools/versions.json
            .wheelhouse/manifest.json

  incremental-scan:
    runs-on: windows-latest
    outputs:
      changed: ${{ steps.detect.outputs.changed }}
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Run incremental scan
        shell: pwsh
        run: kg/scripts/ci-incremental.ps1
      - id: detect
        shell: pwsh
        run: |
          $status = Get-Content kg/reports/incremental-status.json | ConvertFrom-Json
          Write-Output "changed=$($status.changed)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Encoding utf8 -Append
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: incremental-reports
          path: kg/reports/*

  roundtrip-and-snapshots:
    needs: incremental-scan
    if: needs.incremental-scan.outputs.changed == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Apache Jena and Fuseki
        shell: pwsh
        run: |
          $v = Get-Content tools/versions.json | ConvertFrom-Json
          $jenaVer = $v.jena
          $fusekiVer = $v.fuseki
          New-Item -ItemType Directory -Force -Path tools | Out-Null
          $jenaArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-$jenaVer.zip"
          $jenaMirror = "https://downloads.apache.org/jena/binaries/apache-jena-$jenaVer.zip"
          try { Invoke-WebRequest -Uri $jenaArchive -OutFile jena.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $jenaMirror -OutFile jena.zip }
          Expand-Archive jena.zip -DestinationPath tools
          Move-Item tools/apache-jena-$jenaVer tools/jena
          $fusekiArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          $fusekiMirror = "https://downloads.apache.org/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          try { Invoke-WebRequest -Uri $fusekiArchive -OutFile fuseki.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $fusekiMirror -OutFile fuseki.zip }
          Expand-Archive fuseki.zip -DestinationPath tools
          Move-Item tools/apache-jena-fuseki-$fusekiVer tools/fuseki
          Test-Path (Join-Path tools/jena 'bat/riot.bat') | Out-Null
          Test-Path (Join-Path tools/jena 'bat/arq.bat') | Out-Null
      - name: Run round-trip and query snapshots
        shell: pwsh
        run: kg/scripts/ci-roundtrip.ps1
      - name: Upload SPARQL snapshots
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: sparql-snapshots
          path: kg/snapshots/*.srj
  shacl-owl-smoke:
    needs: [incremental-scan, roundtrip-and-snapshots]
    if: needs.incremental-scan.outputs.changed == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Apache Jena and Fuseki
        shell: pwsh
        run: |
          $v = Get-Content tools/versions.json | ConvertFrom-Json
          $jenaVer = $v.jena
          $fusekiVer = $v.fuseki
          New-Item -ItemType Directory -Force -Path tools | Out-Null
          $jenaArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-$jenaVer.zip"
          $jenaMirror = "https://downloads.apache.org/jena/binaries/apache-jena-$jenaVer.zip"
          try { Invoke-WebRequest -Uri $jenaArchive -OutFile jena.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $jenaMirror -OutFile jena.zip }
          Expand-Archive jena.zip -DestinationPath tools
          Move-Item tools/apache-jena-$jenaVer tools/jena
          $fusekiArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          $fusekiMirror = "https://downloads.apache.org/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          try { Invoke-WebRequest -Uri $fusekiArchive -OutFile fuseki.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $fusekiMirror -OutFile fuseki.zip }
          Expand-Archive fuseki.zip -DestinationPath tools
          Move-Item tools/apache-jena-fuseki-$fusekiVer tools/fuseki
          Test-Path (Join-Path tools/jena 'bat/riot.bat') | Out-Null
          Test-Path (Join-Path tools/jena 'bat/arq.bat') | Out-Null
      - name: Run SHACL and OWL smoke tests
        shell: pwsh
        run: kg/scripts/ci-shacl-owl.ps1
      - name: Upload SHACL/OWL reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: shacl-owl-reports
          path: kg/reports/*
  inference-smoke:
    needs: [incremental-scan, roundtrip-and-snapshots, shacl-owl-smoke]
    if: needs.incremental-scan.outputs.changed == 'true'
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Apache Jena and Fuseki
        shell: pwsh
        run: |
          $v = Get-Content tools/versions.json | ConvertFrom-Json
          $jenaVer = $v.jena
          $fusekiVer = $v.fuseki
          New-Item -ItemType Directory -Force -Path tools | Out-Null
          $jenaArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-$jenaVer.zip"
          $jenaMirror = "https://downloads.apache.org/jena/binaries/apache-jena-$jenaVer.zip"
          try { Invoke-WebRequest -Uri $jenaArchive -OutFile jena.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $jenaMirror -OutFile jena.zip }
          Expand-Archive jena.zip -DestinationPath tools
          Move-Item tools/apache-jena-$jenaVer tools/jena
          $fusekiArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          $fusekiMirror = "https://downloads.apache.org/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          try { Invoke-WebRequest -Uri $fusekiArchive -OutFile fuseki.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $fusekiMirror -OutFile fuseki.zip }
          Expand-Archive fuseki.zip -DestinationPath tools
          Move-Item tools/apache-jena-fuseki-$fusekiVer tools/fuseki
          Test-Path (Join-Path tools/jena 'bat/riot.bat') | Out-Null
          Test-Path (Join-Path tools/jena 'bat/arq.bat') | Out-Null
      - name: Run inference smoke (RDFS)
        shell: pwsh
        run: kg/scripts/ci-inference-smoke.ps1 -Mode rdfs
      - name: Run inference smoke (OWL Mini)
        shell: pwsh
        run: kg/scripts/ci-inference-smoke.ps1 -Mode owlmini
      - name: Upload inference reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: inference-reports
          path: kg/reports/*
  api-contract-tests:
    needs: [incremental-scan, inference-smoke]
    if: needs.incremental-scan.outputs.changed == 'true'
    runs-on: windows-latest
    env:
      VCR_RECORD_MODE: none
      PYTEST_ALLOW_NETWORK: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        run: pip install -r requirements-win.txt
      - name: Run API contract tests
        run: pytest tests/clients tests/kg/test_ingest_contract.py
      - name: Upload cassettes
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cassettes
          path: tests/fixtures/cassettes/*.yaml

  provenance-checks:
    needs: [incremental-scan, api-contract-tests]
    if: needs.incremental-scan.outputs.changed == 'true'
    runs-on: windows-latest
    env:
      VCR_RECORD_MODE: none
      PYTEST_ALLOW_NETWORK: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Apache Jena and Fuseki
        shell: pwsh
        run: |
          $v = Get-Content tools/versions.json | ConvertFrom-Json
          $jenaVer = $v.jena
          $fusekiVer = $v.fuseki
          New-Item -ItemType Directory -Force -Path tools | Out-Null
          $jenaArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-$jenaVer.zip"
          $jenaMirror = "https://downloads.apache.org/jena/binaries/apache-jena-$jenaVer.zip"
          try { Invoke-WebRequest -Uri $jenaArchive -OutFile jena.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $jenaMirror -OutFile jena.zip }
          Expand-Archive jena.zip -DestinationPath tools
          Move-Item tools/apache-jena-$jenaVer tools/jena
          $fusekiArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          $fusekiMirror = "https://downloads.apache.org/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          try { Invoke-WebRequest -Uri $fusekiArchive -OutFile fuseki.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $fusekiMirror -OutFile fuseki.zip }
          Expand-Archive fuseki.zip -DestinationPath tools
          Move-Item tools/apache-jena-fuseki-$fusekiVer tools/fuseki
          Test-Path (Join-Path tools/jena 'bat/riot.bat') | Out-Null
          Test-Path (Join-Path tools/jena 'bat/arq.bat') | Out-Null
      - name: Export KG with provenance
        shell: pwsh
        run: |
          python - <<'PY'
from earCrawler.kg.emit_ear import emit_ear
from earCrawler.kg.triples import emit_tradegov_entities
from earCrawler.kg.prov import new_prov_graph, write_prov_files
from pathlib import Path
g = new_prov_graph()
fixture = Path('tests/kg/fixtures')
emit_ear(fixture, Path('kg'), prov_graph=g)
recs = [{'id':'acme','name':'ACME Corp','country':'US','source_url':'https://trade.gov/api/acme','date':'2024-01-01','sha256':'0'*64}]
emit_tradegov_entities(recs, Path('kg'), prov_graph=g)
write_prov_files(g, Path('kg')/'prov')
with open('kg/ear_triples.ttl','w',encoding='utf-8') as f:
    f.write(Path('kg/ear.ttl').read_text())
    f.write(Path('kg/tradegov.ttl').read_text())
PY
      - name: Run provenance checks
        shell: pwsh
        run: kg/scripts/ci-provenance.ps1
      - name: Upload provenance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: provenance-reports
          path: kg/reports/*

  package-smoke:
    runs-on: windows-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: Install PyInstaller
        run: pip install pyinstaller
      - name: Build EXE
        shell: pwsh
        run: scripts/build-exe.ps1
      - name: Smoke test
        shell: pwsh
        run: |
          $exe = Get-ChildItem dist -Filter 'earctl-*-win64.exe' | Select-Object -First 1
          & $exe.FullName --version
          & $exe.FullName diagnose
      - name: Upload artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: earctl-exe
          path: dist/earctl-*-win64.exe

  telemetry-tests:
    needs: hermetic-setup
    runs-on: windows-latest
    env:
      EAR_NO_TELEM_HTTP: '1'
      PYTEST_ALLOW_NETWORK: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install deps
        shell: pwsh
        run: scripts/install-from-wheelhouse.ps1
      - name: Run telemetry tests
        run: pytest tests/telemetry
      - name: Upload spool
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: telemetry-spool
          path: '${{ env.APPDATA }}\\EarCrawler\\spool'

  gc-dry-run:
    needs: [provenance-checks, telemetry-tests]
    runs-on: windows-latest
    env:
      VCR_RECORD_MODE: none
      PYTEST_ALLOW_NETWORK: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Run GC dry-run
        shell: pwsh
        run: kg/scripts/ci-gc.ps1
      - name: Upload GC reports
        if: always()
        uses: actions/upload-artifact@v4

     with:
        name: gc-reports
        path: kg/reports/*

  reconcile-checks:
    needs: [provenance-checks, telemetry-tests]
    runs-on: windows-latest
    env:
      VCR_RECORD_MODE: none
      PYTEST_ALLOW_NETWORK: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Run reconciliation checks
        shell: pwsh
        run: kg/scripts/ci-reconcile.ps1
      - name: Upload reconciliation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reconcile-reports
          path: |
            kg/reports/reconcile-summary.json
            kg/reports/reconcile-conflicts.json
            kg/reports/reconcile-ci.txt

  perf-regression:
    needs: reconcile-checks
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Guard versions
        shell: pwsh
        run: python scripts/check_versions.py
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
      - name: Install Apache Jena and Fuseki
        shell: pwsh
        run: |
          $v = Get-Content tools/versions.json | ConvertFrom-Json
          $jenaVer = $v.jena
          $fusekiVer = $v.fuseki
          New-Item -ItemType Directory -Force -Path tools | Out-Null
          $jenaArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-$jenaVer.zip"
          $jenaMirror = "https://downloads.apache.org/jena/binaries/apache-jena-$jenaVer.zip"
          try { Invoke-WebRequest -Uri $jenaArchive -OutFile jena.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $jenaMirror -OutFile jena.zip }
          Expand-Archive jena.zip -DestinationPath tools
          Move-Item tools/apache-jena-$jenaVer tools/jena
          $fusekiArchive = "https://archive.apache.org/dist/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          $fusekiMirror = "https://downloads.apache.org/jena/binaries/apache-jena-fuseki-$fusekiVer.zip"
          try { Invoke-WebRequest -Uri $fusekiArchive -OutFile fuseki.zip -ErrorAction Stop } catch { Invoke-WebRequest -Uri $fusekiMirror -OutFile fuseki.zip }
          Expand-Archive fuseki.zip -DestinationPath tools
          Move-Item tools/apache-jena-fuseki-$fusekiVer tools/fuseki
      - name: Generate synthetic dataset
        shell: pwsh
        run: |
          python - <<'PY'
from perf.synth.generator import generate
from pathlib import Path
generate('S', Path('perf/synth/out'))
PY
      - name: Run perf suite
        shell: pwsh
        run: kg/scripts/perf-run.ps1 -Scale S -Cold -Warm
      - name: Run perf gate
        shell: pwsh
        run: kg/scripts/perf-gate.ps1 -Scale S
      - name: Upload perf reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: perf-reports
          path: kg/reports/*
            
  repro-smoke:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Canonical freeze
        shell: pwsh
        run: kg/scripts/canonical-freeze.ps1
      - name: Manifest
        shell: pwsh
        run: scripts/make-manifest.ps1
      - name: Validate manifest schema
        run: |
          python - <<'PY'
import json, re
m=json.load(open('kg/canonical/manifest.json'))
assert 'files' in m
for f in m['files']:
    assert set(f.keys())=={'path','size','sha256'}
    assert re.fullmatch(r'[0-9a-f]{64}', f['sha256'])
PY
      - name: Rebuild and compare
        shell: pwsh
        run: |
          Copy-Item kg/canonical/dataset.nq dataset1.nq
          $snapHashes = @{}
          Get-ChildItem kg/canonical/snapshots -Filter *.srj | ForEach-Object { $snapHashes[$_.Name] = (Get-FileHash $_.FullName -Algorithm SHA256).Hash; Copy-Item $_.FullName ("orig-" + $_.Name) }
          Remove-Item -Recurse -Force kg/canonical
          kg/scripts/canonical-freeze.ps1
          $hash1 = (Get-FileHash dataset1.nq -Algorithm SHA256).Hash
          $hash2 = (Get-FileHash kg/canonical/dataset.nq -Algorithm SHA256).Hash
          if ($hash1 -ne $hash2) { fc /b dataset1.nq kg/canonical/dataset.nq > dist/determinism-diff.txt; exit 1 }
          foreach ($k in $snapHashes.Keys) {
            $newHash = (Get-FileHash (Join-Path kg/canonical/snapshots $k) -Algorithm SHA256).Hash
            if ($snapHashes[$k] -ne $newHash) { fc /b ("orig-"+$k) (Join-Path kg/canonical/snapshots $k) > dist/determinism-diff.txt; exit 1 }
          }
  delta-summary:
    if: startsWith(github.head_ref, 'auto/delta/')
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Post delta summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const files = fs.readdirSync('kg/reports').filter(f => f.startsWith('delta-summary'));
            if (files.length) {
              const body = fs.readFileSync(`kg/reports/${files[0]}`, 'utf8');
              github.rest.issues.createComment({issue_number: context.issue.number, owner: context.repo.owner, repo: context.repo.repo, body: '```json\n'+body+'\n```'});
            }

  reconcile-checks:
    needs: hermetic-setup
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run reconciliation checks
        shell: pwsh
        run: kg/scripts/ci-reconcile.ps1
      - name: Upload reconciliation reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reconcile-reports
          path: |
            kg/reports/reconcile-summary.json
            kg/reports/reconcile-conflicts.json
            kg/reports/reconcile-ci.txt

  access-audit:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      - name: Access audit
        shell: pwsh
        env:
          EARCTL_TELEMETRY_DISABLE: '1'
        run: kg/scripts/ci-access-audit.ps1
      - name: Upload access artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: access-audit
          path: |
            kg/reports/access-audit.txt
            ${{ env.PROGRAMDATA }}\EarCrawler\audit\*.jsonl
